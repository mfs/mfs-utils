#!/usr/bin/env python3

# TODO
# Clean up and document command line arguments
# or use a config file?
# Actually spawn send/receive
# Expire old backups.

import sys
import glob
import os.path
import paramiko
import subprocess
import datetime
import socket

host = sys.argv[1]
remote_path = sys.argv[2]
local_path = sys.argv[3]

ssh = paramiko.SSHClient()
ssh.load_system_host_keys()
ssh.connect(host, username='root')

# list remote snapshots, this could be better
# e.g. test if they are snapshots
# http://stackoverflow.com/questions/25908149/how-to-test-if-location-is-a-btrfs-subvolume
def list_remote_snapshots(client):
    snapshots = set()
    stdin, stdout, stderr = client.exec_command('ls {}'.format(remote_path))

    for line in stdout.readlines():
        snapshots.add(line.strip())

    return snapshots

# list local snapshots, this could be better
# e.g. test if they are snapshots
def list_local_snapshots():
    snapshots = set()
    for f in glob.glob(os.path.join(local_path, '*')):
        snapshots.add(os.path.basename(f))

    return snapshots

def isodate():
    return datetime.datetime.now().strftime("%Y-%m-%dT%H:%M:%S")

def snapshot(src, dst):
    p = subprocess.run(["btrfs", "subvolume", "snapshot", "-r", src, dst])

    if p.returncode != 0:
        print("Error creating snapshot: {}".format(p.returncode))
        sys.exit(p.returncode)

def snapshot_home():
    home = os.path.expanduser("~")
    snapshots = os.path.expanduser("~/.snapshots")
    snapshot_name = "{}-{}-{}".format(
        socket.gethostname(),
        os.environ.get("USER"),
        isodate()
    )

    snapshot(home, os.path.join(snapshots, snapshot_name))

def main():

    snapshot_home()

    remote_snapshots = list_remote_snapshots(ssh)

    local_snapshots = list_local_snapshots()

    common_snapshots = local_snapshots.intersection(remote_snapshots)

    if not common_snapshots:
        print("No common snapshots. Perform full backup.")
        return

    # we should compare these to make sure current is newer than parent
    # though we will be creating current in this script eventually.
    parent = sorted(common_snapshots)[-1]

    current = sorted(local_snapshots)[-1]

    # print the command to run for now. Need to spawn this off.
    print("btrfs send -p {} \\".format(os.path.join(local_path, parent)))
    print("{} | pv | \\".format(os.path.join(local_path, current)))
    print("ssh {} btrfs receive {}".format(host, remote_path))

if __name__ == "__main__":
    main()
