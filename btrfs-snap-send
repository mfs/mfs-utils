#!/usr/bin/env python3

# TODO
# Expire old backups. Both local and remote.

import sys
import glob
import os.path
import paramiko
import subprocess
import datetime
import socket
import argparse


def parse_cmdline():
    parser = argparse.ArgumentParser(description = "btrfs snapshot helper")
    parser.add_argument("source", help = "source subvolume")
    parser.add_argument("snapshots", help = "where to store snapshot locally")
    parser.add_argument("remote", help = "remote server and path")

    return parser.parse_args()

# list remote snapshots, this could be better
# e.g. test if they are snapshots
# http://stackoverflow.com/questions/25908149/how-to-test-if-location-is-a-btrfs-subvolume
def list_remote_snapshots(client, remote_path):
    snapshots = set()
    stdin, stdout, stderr = client.exec_command('ls {}'.format(remote_path))

    for line in stdout.readlines():
        snapshots.add(line.strip())

    return snapshots

# list local snapshots, this could be better
# e.g. test if they are snapshots
def list_local_snapshots(local_path):
    snapshots = set()
    for f in glob.glob(os.path.join(local_path, '*')):
        snapshots.add(os.path.basename(f))

    return snapshots

def prune_local_snapshots(path, snapshots, n):
    x = len(snapshots) - n
    if x > 0:
        for s in sorted(snapshots)[:x]:
            delete_snapshot(path)

def isodate():
    return datetime.datetime.now().strftime("%Y-%m-%dT%H:%M:%S")

def snapshot(src, dst):
    print(":: creating snapshot {}".format(dst))
    p = subprocess.run(["btrfs", "subvolume", "snapshot", "-r", src, dst])

    if p.returncode != 0:
        print("Error creating snapshot: {}".format(p.returncode))
        sys.exit(p.returncode)

def delete_snapshot(path):
    p = subprocess.run(["btrfs", "subvolume", "deletet", path])

    if p.returncode != 0:
        print("Error deleting snapshot: {}".format(p.returncode))
        sys.exit(p.returncode)

def main():

    args = parse_cmdline()

    host, dest = args.remote.split(":")

    ssh = paramiko.SSHClient()
    ssh.load_system_host_keys()
    ssh.connect(host, username='root')

    # this probably needs to be adjustable?
    snapshot_name = "{}-{}-{}".format(
        socket.gethostname(),
        os.environ.get("USER"),
        isodate()
    )

    snapshot(args.source, os.path.join(args.snapshots, snapshot_name))

    remote_snapshots = list_remote_snapshots(ssh, dest)

    local_snapshots = list_local_snapshots(args.snapshots)

    common_snapshots = local_snapshots.intersection(remote_snapshots)

    current = sorted(local_snapshots)[-1]

    if not common_snapshots:
        print("No common snapshots. Perform full backup.")
        cmd = "btrfs send {} | pv | ".format(os.path.join(args.snapshots, current)) + \
        "ssh {} btrfs receive {}".format(host, dest)

        subprocess.run(cmd, shell = True)
        return

    # we should compare these to make sure current is newer than parent
    # though we will be creating current in this script eventually.
    parent = sorted(common_snapshots)[-1]

    print("Sending snapshot...")

    cmd = "btrfs send -p {} ".format(os.path.join(args.snapshots, parent)) + \
    "{} | pv | ".format(os.path.join(args.snapshots, current)) + \
    "ssh {} btrfs receive {}".format(host, dest)

    subprocess.run(cmd, shell = True)

if __name__ == "__main__":
    main()
