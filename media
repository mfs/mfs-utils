#!/usr/bin/env python3

# Copyright 2012 Mike Sampson

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import re
import sys
import glob
import os.path
import argparse
import mimetypes
import subprocess

def parse_args():
    parser = argparse.ArgumentParser(description =
            'a simple mplayer launcher.')
    parser.add_argument('filename', metavar='FILE', type=str, nargs = '?',
            help='file to play, if not provided allow user to select from media files in current directory.')
    parser.add_argument('-l', '--list', action = 'store_true',
            help = 'list media files in current directory.')
    parser.add_argument('-f', '--fullscreen', action = 'store_true',
            help = 'launch mplayer fullscreen.')

    return parser.parse_args()

def mplayer(filename):
    fd = open('/dev/null')
    if args.fullscreen:
        command = ['mplayer', '-fs', filename]
    else:
        command = ['mplayer', filename]
    subprocess.Popen(command, stdin = fd, stdout = fd, stderr = fd)
    fd.close()

def list_files(pattern):
    all_files = []

    for path, dirs, files in os.walk(os.getcwd()):
        if pattern:
            rule = re.compile(pattern, re.IGNORECASE)
            all_files.extend([os.path.join(path, x) for x in files if rule.search(x)])
        else:
            all_files.extend([os.path.join(path, x) for x in files])

    return all_files

def list_media_files(pattern = None):
    def fn(filename):
        mt = mimetypes.guess_type(filename)[0]
        return mt != None and mt.startswith('video')

    files = list(filter(fn, list_files(pattern)))

    files.sort()

    return files

def list_media(files, allow_selection = False):
    if not files:
        print('No media files found in current directory.')
        return

    for i, f in enumerate(files):
        print('[%2d] - %s' % (i, os.path.basename(f)))

    if not allow_selection:
        return

    selection = input('\nSelect file to play (0 to %d, q to quit): ' % (len(files) - 1))
    if selection == 'q':
        return

    try:
        selection = int(selection)
        mplayer(files[selection])
    except:
        print('Invalid selection.')

args = parse_args()
if args.filename and os.path.isfile(args.filename):
    mplayer(args.filename)
elif args.filename:
    list_media(list_media_files(args.filename), not args.list)
else:
    list_media(list_media_files(), not args.list)
